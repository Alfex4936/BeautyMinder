name: Continuous Delivery & Jacoco CodeCoverage

on:
  push:
    branches: [main]
    paths:
      - "java/src/main/**/*"
      - "java/src/test/**/*"
      - "java/**/build.gradle*"
      - "java/**/settings.gradle*"

  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  docker_build_and_deploy_to_ec2:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: java
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "corretto"

      - name: Configure Application Secrets
        run: |
          echo "${{ secrets.APPLICATION_YML }}" | base64 --decode > src/main/resources/application-secret.yml
          echo "${{ secrets.APPLICATION_TEST_YML }}" | base64 --decode > src/main/resources/application-secret-github.yml
          echo "${{ secrets.LOGBACK_TEST }}" | base64 --decode > src/test/resources/logback-test.xml
          echo "${{ secrets.LOGSTASH_CONF }}" | base64 --decode > logstash/pipeline/spring-boot-logs.conf
          echo "${{ secrets.REDIS_CONF }}" | base64 --decode > redis/redis.conf
          echo "${{ secrets.DOCKER_PYTHON }}" | base64 --decode > python.env
          echo "${{ secrets.DOCKER_SPRING }}" | base64 --decode > spring.env
          echo "${{ secrets.DOCKER_REDIS }}" | base64 --decode > redis.env
          echo "${{ secrets.DOCKER_GOOGLE }}" | base64 --decode > google-beautyminder.json

      - name: Make Gradle Wrapper Executable
        run: chmod +x gradlew

      - name: Gradle Build and Package
        run: ./gradlew clean bootJar build -x test

      - name: Docker Image Build and Local Deployment
        run: |
          cp Dockerfile.spring build/libs/
          cp google-beautyminder.json build/libs/
          cp Dockerfile.python python/
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker compose -f ELK.yml up --build -d

      - name: Push Docker Images to Registry
        run: |
          docker ps
          docker tag java-spring-boot ${{ secrets.DOCKER_USERNAME }}/beautyminder-spring:latest
          docker tag java-python-fastapi ${{ secrets.DOCKER_USERNAME }}/beautyminder-fastapi:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/beautyminder-spring:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/beautyminder-fastapi:latest

      - name: Deploy Docker Containers to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC_HOST }}
          username: ${{ secrets.EC_USERNAME }}
          password: ${{ secrets.EC_PASSWORD }}
          passphrase: ${{ secrets.EC_PASSPHRASE }}
          key: ${{ secrets.EC_PRIVATE_KEY }}
          script: |
            whoami
            cd beautyminder
            docker compose -f ELK-hub.yml pull
            docker compose -f ELK-hub.yml build --no-cache
            docker compose -f ELK-hub.yml up --build --force-recreate -d

  jacoco_codecov:
    runs-on: ubuntu-latest
    needs: docker_build_and_deploy_to_ec2 # run the test whenever pushing to main
    defaults:
      run:
        working-directory: java
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "corretto"

      - name: Setup secrets
        run: |
          echo "${{ secrets.APPLICATION_YML }}" | base64 --decode > src/main/resources/application-secret.yml
          echo "${{ secrets.APPLICATION_TEST_YML }}" | base64 --decode > src/main/resources/application-secret-github.yml
          echo "${{ secrets.LOGBACK_TEST }}" | base64 --decode > src/test/resources/logback-test.xml
          echo "${{ secrets.DOCKER_PYTHON }}" | base64 --decode > python.env
          echo "${{ secrets.DOCKER_SPRING }}" | base64 --decode > spring.env
          echo "${{ secrets.DOCKER_REDIS }}" | base64 --decode > redis.env
          echo "${{ secrets.DOCKER_GOOGLE }}" | base64 --decode > google-beautyminder.json
          echo "GOOGLE_APPLICATION_CREDENTIALS=${GITHUB_WORKSPACE}/java/google-beautyminder.json" >> "$GITHUB_ENV"
          echo "LOGSTASH_HOST=${{ secrets.EC_HOST }}" >> "$GITHUB_ENV"

      - name: Correct permission
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test

      - name: Run JacocoTest
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 10
          max_attempts: 2
          command: |
            cd ${GITHUB_WORKSPACE}/java
            ./gradlew clean test jacocoTestReport

      # - name: Run JacocoTest
      #   run: ./gradlew clean test jacocoTestReport
      #   continue-on-error: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: build/reports/jacoco/test/jacocoTestReport.xml
          fail_ci_if_error: true
